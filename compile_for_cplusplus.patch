diff --git a/include/param/param.h b/include/param/param.h
index c10db0d..ef88089 100644
--- a/include/param/param.h
+++ b/include/param/param.h
@@ -16,22 +16,22 @@
  */
 
 typedef enum {
-	PARAM_TYPE_UINT8,
-	PARAM_TYPE_UINT16,
-	PARAM_TYPE_UINT32,
-	PARAM_TYPE_UINT64,
-	PARAM_TYPE_INT8,
-	PARAM_TYPE_INT16,
-	PARAM_TYPE_INT32,
-	PARAM_TYPE_INT64,
-	PARAM_TYPE_XINT8,
-	PARAM_TYPE_XINT16,
-	PARAM_TYPE_XINT32,
-	PARAM_TYPE_XINT64,
-	PARAM_TYPE_FLOAT,
-	PARAM_TYPE_DOUBLE,
-	PARAM_TYPE_STRING,
-	PARAM_TYPE_DATA,
+    PARAM_TYPE_UINT8,
+    PARAM_TYPE_UINT16,
+    PARAM_TYPE_UINT32,
+    PARAM_TYPE_UINT64,
+    PARAM_TYPE_INT8,
+    PARAM_TYPE_INT16,
+    PARAM_TYPE_INT32,
+    PARAM_TYPE_INT64,
+    PARAM_TYPE_XINT8,
+    PARAM_TYPE_XINT16,
+    PARAM_TYPE_XINT32,
+    PARAM_TYPE_XINT64,
+    PARAM_TYPE_FLOAT,
+    PARAM_TYPE_DOUBLE,
+    PARAM_TYPE_STRING,
+    PARAM_TYPE_DATA,
 } param_type_e;
 
 /**
@@ -59,32 +59,32 @@ typedef enum {
  */
 typedef struct param_s {
 
-	/* Parameter declaration */
-	uint16_t id;
-	uint8_t node;
-	param_type_e type;
-	uint32_t mask;
-	char *name;
-	char *unit;
+    /* Parameter declaration */
+    char *name;
+    uint8_t node;
+    uint16_t id;
+    param_type_e type;
+    uint32_t mask;
+    char *unit;
 
-	/* Storage */
-	void * addr;
-	const struct vmem_s * vmem;
-	int array_size;
-	int array_step;
+    /* Storage */
+    void * addr;
+    const struct vmem_s * vmem;
+    int array_size;
+    int array_step;
 
-	/* Local info */
-	void (*callback)(struct param_s * param, int offset);
-	uint32_t timestamp;
+    /* Local info */
+    void (*callback)(struct param_s * param, int offset);
+    uint32_t timestamp;
 
-	/* single linked list:
-	 * The weird definition format comes from sys/queue.h SLINST_ENTRY() macro */
-	struct { struct param_s *sle_next; } next;
+    /* single linked list:
+     * The weird definition format comes from sys/queue.h SLINST_ENTRY() macro */
+    struct { struct param_s *sle_next; } next;
 
 
 } param_t;
 
-#define PARAM_LIST_LOCAL	255
+#define PARAM_LIST_LOCAL    255
 
 /**
  * DEFINITION HELPERS:
@@ -100,60 +100,60 @@ typedef struct param_s {
  *
  */
 #define PARAM_DEFINE_STATIC_RAM(_id, _name, _type, _array_count, _array_step, _flags, _callback, _unit, _physaddr, _log) \
-	__attribute__((section("param"))) \
-	__attribute__((aligned(1))) \
-	__attribute__((used)) \
-	param_t _name = { \
-		.vmem = NULL, \
-		.node = PARAM_LIST_LOCAL, \
-		.id = _id, \
-		.type = _type, \
-		.name = #_name, \
-		.array_size = _array_count, \
-		.array_step = _array_step, \
-		.mask = _flags, \
-		.unit = _unit, \
-		.callback = _callback, \
-		.addr = _physaddr, \
-	}
+    __attribute__((section("param"))) \
+    __attribute__((aligned(1))) \
+    __attribute__((used)) \
+    param_t _name = { \
+        .name = #_name, \
+        .node = PARAM_LIST_LOCAL, \
+        .id = _id, \
+        .type = _type, \
+        .mask = _flags, \
+        .unit = _unit, \
+        .addr = _physaddr, \
+        .vmem = NULL, \
+        .array_size = _array_count, \
+        .array_step = _array_step, \
+        .callback = _callback, \
+    }
 
 #define PARAM_DEFINE_STATIC_VMEM(_id, _name, _type, _array_count, _array_step, _flags, _callback, _unit, _vmem_name, _vmem_addr, _log) \
-	__attribute__((section("param"))) \
-	__attribute__((aligned(1))) \
-	__attribute__((used)) \
-	param_t _name = { \
-		.node = PARAM_LIST_LOCAL, \
-		.id = _id, \
-		.type = _type, \
-		.name = #_name, \
-		.array_size = _array_count, \
-		.array_step = _array_step, \
-		.mask = _flags, \
-		.callback = _callback, \
-		.unit = _unit, \
-		.addr = (void *) _vmem_addr, \
-		.vmem = &vmem_##_vmem_name, \
-	}
+    __attribute__((section("param"))) \
+    __attribute__((aligned(1))) \
+    __attribute__((used)) \
+    param_t _name = { \
+        .name = #_name, \
+        .node = PARAM_LIST_LOCAL, \
+        .id = _id, \
+        .type = _type, \
+        .mask = _flags, \
+        .unit = _unit, \
+        .addr = (void *) _vmem_addr, \
+        .vmem = &vmem_##_vmem_name, \
+        .array_size = _array_count, \
+        .array_step = _array_step, \
+        .callback = _callback, \
+    }
 
 #define PARAM_DEFINE_REMOTE(_name, _node, _id, _type, _array_size, _array_step, _flags, _physaddr) \
-	__attribute__((section("param"))) \
-	__attribute__((aligned(1))) \
-	__attribute__((used)) \
-	param_t _name = { \
-		.node = _node, \
-		.id = _id, \
-		.type = _type, \
-		.array_size = _array_size, \
-		.array_step = _array_step, \
-		.name = (char *) #_name, \
-		.mask = _flags, \
-		.addr = _physaddr, \
-	};
+    __attribute__((section("param"))) \
+    __attribute__((aligned(1))) \
+    __attribute__((used)) \
+    param_t _name = { \
+        .name = (char *) #_name, \
+        .node = _node, \
+        .id = _id, \
+        .type = _type, \
+        .mask = _flags, \
+        .addr = _physaddr, \
+        .array_size = _array_size, \
+        .array_step = _array_step, \
+    };
 
 /* Native getter functions, will return native types */
 #define PARAM_GET(type, name) \
-	type param_get_##name(param_t * param); \
-	type param_get_##name##_array(param_t * param, unsigned int i);
+    type param_get_##name(param_t * param); \
+    type param_get_##name##_array(param_t * param, unsigned int i);
 PARAM_GET(uint8_t, uint8)
 PARAM_GET(uint16_t, uint16)
 PARAM_GET(uint32_t, uint32)
@@ -168,10 +168,10 @@ PARAM_GET(double, double)
 
 /* Native setter functions, these take a native type as argument */
 #define PARAM_SET(type, name) \
-	void param_set_##name(param_t * param, type value); \
-	void param_set_##name##_nocallback(param_t * param, type value); \
-	void param_set_##name##_array(param_t * param, unsigned int i, type value); \
-	void param_set_##name##_array_nocallback(param_t * param, unsigned int i, type value);
+    void param_set_##name(param_t * param, type value); \
+    void param_set_##name##_nocallback(param_t * param, type value); \
+    void param_set_##name##_array(param_t * param, unsigned int i, type value); \
+    void param_set_##name##_array_nocallback(param_t * param, unsigned int i, type value);
 PARAM_SET(uint8_t, uint8)
 PARAM_SET(uint16_t, uint16)
 PARAM_SET(uint32_t, uint32)
