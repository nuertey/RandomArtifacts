diff --git a/include/param/param.h b/include/param/param.h
index c10db0d..ef88089 100644
--- a/include/param/param.h
+++ b/include/param/param.h
@@ -16,22 +16,22 @@
  */
 
 typedef enum {
-	PARAM_TYPE_UINT8,
-	PARAM_TYPE_UINT16,
-	PARAM_TYPE_UINT32,
-	PARAM_TYPE_UINT64,
-	PARAM_TYPE_INT8,
-	PARAM_TYPE_INT16,
-	PARAM_TYPE_INT32,
-	PARAM_TYPE_INT64,
-	PARAM_TYPE_XINT8,
-	PARAM_TYPE_XINT16,
-	PARAM_TYPE_XINT32,
-	PARAM_TYPE_XINT64,
-	PARAM_TYPE_FLOAT,
-	PARAM_TYPE_DOUBLE,
-	PARAM_TYPE_STRING,
-	PARAM_TYPE_DATA,
+    PARAM_TYPE_UINT8,
+    PARAM_TYPE_UINT16,
+    PARAM_TYPE_UINT32,
+    PARAM_TYPE_UINT64,
+    PARAM_TYPE_INT8,
+    PARAM_TYPE_INT16,
+    PARAM_TYPE_INT32,
+    PARAM_TYPE_INT64,
+    PARAM_TYPE_XINT8,
+    PARAM_TYPE_XINT16,
+    PARAM_TYPE_XINT32,
+    PARAM_TYPE_XINT64,
+    PARAM_TYPE_FLOAT,
+    PARAM_TYPE_DOUBLE,
+    PARAM_TYPE_STRING,
+    PARAM_TYPE_DATA,
 } param_type_e;
 
 /**
@@ -59,32 +59,32 @@ typedef enum {
  */
 typedef struct param_s {
 
-	/* Parameter declaration */
-	uint16_t id;
-	uint8_t node;
-	param_type_e type;
-	uint32_t mask;
-	char *name;
-	char *unit;
+    /* Parameter declaration */
+    char *name;
+    uint8_t node;
+    uint16_t id;
+    param_type_e type;
+    uint32_t mask;
+    char *unit;
 
-	/* Storage */
-	void * addr;
-	const struct vmem_s * vmem;
-	int array_size;
-	int array_step;
+    /* Storage */
+    void * addr;
+    const struct vmem_s * vmem;
+    int array_size;
+    int array_step;
 
-	/* Local info */
-	void (*callback)(struct param_s * param, int offset);
-	uint32_t timestamp;
+    /* Local info */
+    void (*callback)(struct param_s * param, int offset);
+    uint32_t timestamp;
 
-	/* single linked list:
-	 * The weird definition format comes from sys/queue.h SLINST_ENTRY() macro */
-	struct { struct param_s *sle_next; } next;
+    /* single linked list:
+     * The weird definition format comes from sys/queue.h SLINST_ENTRY() macro */
+    struct { struct param_s *sle_next; } next;
 
 
 } param_t;
 
-#define PARAM_LIST_LOCAL	255
+#define PARAM_LIST_LOCAL    255
 
 /**
  * DEFINITION HELPERS:
@@ -100,60 +100,60 @@ typedef struct param_s {
  *
  */
 #define PARAM_DEFINE_STATIC_RAM(_id, _name, _type, _array_count, _array_step, _flags, _callback, _unit, _physaddr, _log) \
-	__attribute__((section("param"))) \
-	__attribute__((aligned(1))) \
-	__attribute__((used)) \
-	param_t _name = { \
-		.vmem = NULL, \
-		.node = PARAM_LIST_LOCAL, \
-		.id = _id, \
-		.type = _type, \
-		.name = #_name, \
-		.array_size = _array_count, \
-		.array_step = _array_step, \
-		.mask = _flags, \
-		.unit = _unit, \
-		.callback = _callback, \
-		.addr = _physaddr, \
-	}
+    __attribute__((section("param"))) \
+    __attribute__((aligned(1))) \
+    __attribute__((used)) \
+    param_t _name = { \
+        .name = #_name, \
+        .node = PARAM_LIST_LOCAL, \
+        .id = _id, \
+        .type = _type, \
+        .mask = _flags, \
+        .unit = _unit, \
+        .addr = _physaddr, \
+        .vmem = NULL, \
+        .array_size = _array_count, \
+        .array_step = _array_step, \
+        .callback = _callback, \
+    }
 
 #define PARAM_DEFINE_STATIC_VMEM(_id, _name, _type, _array_count, _array_step, _flags, _callback, _unit, _vmem_name, _vmem_addr, _log) \
-	__attribute__((section("param"))) \
-	__attribute__((aligned(1))) \
-	__attribute__((used)) \
-	param_t _name = { \
-		.node = PARAM_LIST_LOCAL, \
-		.id = _id, \
-		.type = _type, \
-		.name = #_name, \
-		.array_size = _array_count, \
-		.array_step = _array_step, \
-		.mask = _flags, \
-		.callback = _callback, \
-		.unit = _unit, \
-		.addr = (void *) _vmem_addr, \
-		.vmem = &vmem_##_vmem_name, \
-	}
+    __attribute__((section("param"))) \
+    __attribute__((aligned(1))) \
+    __attribute__((used)) \
+    param_t _name = { \
+        .name = #_name, \
+        .node = PARAM_LIST_LOCAL, \
+        .id = _id, \
+        .type = _type, \
+        .mask = _flags, \
+        .unit = _unit, \
+        .addr = (void *) _vmem_addr, \
+        .vmem = &vmem_##_vmem_name, \
+        .array_size = _array_count, \
+        .array_step = _array_step, \
+        .callback = _callback, \
+    }
 
 #define PARAM_DEFINE_REMOTE(_name, _node, _id, _type, _array_size, _array_step, _flags, _physaddr) \
-	__attribute__((section("param"))) \
-	__attribute__((aligned(1))) \
-	__attribute__((used)) \
-	param_t _name = { \
-		.node = _node, \
-		.id = _id, \
-		.type = _type, \
-		.array_size = _array_size, \
-		.array_step = _array_step, \
-		.name = (char *) #_name, \
-		.mask = _flags, \
-		.addr = _physaddr, \
-	};
+    __attribute__((section("param"))) \
+    __attribute__((aligned(1))) \
+    __attribute__((used)) \
+    param_t _name = { \
+        .name = (char *) #_name, \
+        .node = _node, \
+        .id = _id, \
+        .type = _type, \
+        .mask = _flags, \
+        .addr = _physaddr, \
+        .array_size = _array_size, \
+        .array_step = _array_step, \
+    };
 
 /* Native getter functions, will return native types */
 #define PARAM_GET(type, name) \
-	type param_get_##name(param_t * param); \
-	type param_get_##name##_array(param_t * param, unsigned int i);
+    type param_get_##name(param_t * param); \
+    type param_get_##name##_array(param_t * param, unsigned int i);
 PARAM_GET(uint8_t, uint8)
 PARAM_GET(uint16_t, uint16)
 PARAM_GET(uint32_t, uint32)
@@ -168,10 +168,10 @@ PARAM_GET(double, double)
 
 /* Native setter functions, these take a native type as argument */
 #define PARAM_SET(type, name) \
-	void param_set_##name(param_t * param, type value); \
-	void param_set_##name##_nocallback(param_t * param, type value); \
-	void param_set_##name##_array(param_t * param, unsigned int i, type value); \
-	void param_set_##name##_array_nocallback(param_t * param, unsigned int i, type value);
+    void param_set_##name(param_t * param, type value); \
+    void param_set_##name##_nocallback(param_t * param, type value); \
+    void param_set_##name##_array(param_t * param, unsigned int i, type value); \
+    void param_set_##name##_array_nocallback(param_t * param, unsigned int i, type value);
 PARAM_SET(uint8_t, uint8)
 PARAM_SET(uint16_t, uint16)
 PARAM_SET(uint32_t, uint32)
diff --git a/include/vmem/vmem_file.h b/include/vmem/vmem_file.h
index b22bcd8..fef3b15 100644
--- a/include/vmem/vmem_file.h
+++ b/include/vmem/vmem_file.h
@@ -11,8 +11,8 @@
 #include <vmem/vmem.h>
 
 typedef struct {
-	void * physaddr;
-	char * filename;
+    void * physaddr;
+    char * filename;
 } vmem_file_driver_t;
 
 void vmem_file_init(const vmem_t * vmem);
@@ -20,23 +20,23 @@ void vmem_file_read(const vmem_t * vmem, uint32_t addr, void * dataout, int len)
 void vmem_file_write(const vmem_t * vmem, uint32_t addr, void * datain, int len);
 
 #define VMEM_DEFINE_FILE(name_in, strname, filename_in, size_in) \
-	uint8_t vmem_##name_in##_buf[size_in] = {}; \
-	static const vmem_file_driver_t vmem_##name_in##_driver = { \
-		.physaddr = vmem_##name_in##_buf, \
-		.filename = filename_in, \
-	}; \
-	__attribute__((section("vmem"))) \
-	__attribute__((aligned(1))) \
-	__attribute__((used)) \
-	const vmem_t vmem_##name_in = { \
-		.type = VMEM_TYPE_FILE, \
-		.name = strname, \
-		.size = size_in, \
-		.read = vmem_file_read, \
-		.write = vmem_file_write, \
-		.driver = &vmem_##name_in##_driver, \
-		.vaddr = vmem_##name_in##_buf, \
-	};
+    uint8_t vmem_##name_in##_buf[size_in] = {}; \
+    vmem_file_driver_t vmem_##name_in##_driver = { \
+        .physaddr = vmem_##name_in##_buf, \
+        .filename = filename_in, \
+    }; \
+    __attribute__((section("vmem"))) \
+    __attribute__((aligned(1))) \
+    __attribute__((used)) \
+    vmem_t vmem_##name_in = { \
+        .type = VMEM_TYPE_FILE, \
+        .read = vmem_file_read, \
+        .write = vmem_file_write, \
+        .vaddr = vmem_##name_in##_buf, \
+        .size = size_in, \
+        .name = strname, \
+        .driver = &vmem_##name_in##_driver, \
+    };
 
 
 #endif /* LIB_PARAM_INCLUDE_VMEM_VMEM_FILE_H_ */
diff --git a/include/vmem/vmem_ram.h b/include/vmem/vmem_ram.h
index 75df671..b75ee73 100644
--- a/include/vmem/vmem_ram.h
+++ b/include/vmem/vmem_ram.h
@@ -14,25 +14,25 @@ void vmem_ram_read(const vmem_t * vmem, uint32_t addr, void * dataout, int len);
 void vmem_ram_write(const vmem_t * vmem, uint32_t addr, void * datain, int len);
 
 typedef struct {
-	void * physaddr;
+    void * physaddr;
 } vmem_ram_driver_t;
 
 #define VMEM_DEFINE_STATIC_RAM(name_in, strname, size_in) \
-	uint8_t vmem_##name_in##_heap[size_in] = {}; \
-	static const vmem_ram_driver_t vmem_##name_in##_driver = { \
-		.physaddr = vmem_##name_in##_heap, \
-	}; \
-	__attribute__((section("vmem"))) \
-	__attribute__((aligned(1))) \
-	__attribute__((used)) \
-	const vmem_t vmem_##name_in = { \
-		.type = VMEM_TYPE_RAM, \
-		.name = strname, \
-		.size = size_in, \
-		.read = vmem_ram_read, \
-		.write = vmem_ram_write, \
-		.driver = &vmem_##name_in##_driver, \
-		.vaddr = vmem_##name_in##_heap, \
-	};
+    uint8_t vmem_##name_in##_heap[size_in] = {}; \
+    vmem_ram_driver_t vmem_##name_in##_driver = { \
+        .physaddr = vmem_##name_in##_heap, \
+    }; \
+    __attribute__((section("vmem"))) \
+    __attribute__((aligned(1))) \
+    __attribute__((used)) \
+    vmem_t vmem_##name_in = { \
+        .type = VMEM_TYPE_RAM, \
+        .read = vmem_ram_read, \
+        .write = vmem_ram_write, \
+        .vaddr = vmem_##name_in##_heap, \
+        .size = size_in, \
+        .name = strname, \
+        .driver = &vmem_##name_in##_driver, \
+    };
 
 #endif /* SRC_PARAM_VMEM_RAM_H_ */
diff --git a/src/param/collector/param_collector_config.c b/src/param/collector/param_collector_config.c
index 697750a..80c778e 100644
--- a/src/param/collector/param_collector_config.c
+++ b/src/param/collector/param_collector_config.c
@@ -15,44 +15,44 @@
 struct param_collector_config_s param_collector_config[16] = {0};
 
 void param_col_confstr_callback(struct param_s * param, int offset) {
-	param_collector_init();
+    param_collector_init();
 }
 
-extern const vmem_t vmem_col;
+extern vmem_t vmem_col;
 PARAM_DEFINE_STATIC_VMEM(PARAMID_COLLECTOR_RUN, col_run, PARAM_TYPE_UINT8, 0, sizeof(uint8_t), PM_CONF, NULL, "", col, 0x0, NULL);
 PARAM_DEFINE_STATIC_VMEM(PARAMID_COLLECTOR_VERBOSE, col_verbose, PARAM_TYPE_UINT8, 0, sizeof(uint8_t), PM_CONF, NULL, "", col, 0x1, NULL);
 PARAM_DEFINE_STATIC_VMEM(PARAMID_COLLECTOR_CNFSTR, col_cnfstr, PARAM_TYPE_STRING, 100, 0, PM_CONF, param_col_confstr_callback, "", col, 0x02, NULL);
 
 void param_collector_init(void) {
-	char buf[100];
-	param_get_data(&col_cnfstr, buf, 100);
-	//int len = strnlen(buf, 100);
-	//printf("Init with str: %s, len %u\n", buf, len);
-
-	/* Clear config array */
-	memset(param_collector_config, 0, sizeof(param_collector_config));
-
-	/* Get first token */
-	char *saveptr;
-	char * str = strtok_r(buf, ",", &saveptr);
-	int i = 0;
-
-	while ((str) && (strlen(str) > 1)) {
-		unsigned int node, interval, mask = 0xFFFFFFFF;
-		if (sscanf(str, "%u %u %x", &node, &interval, &mask) != 3) {
-			if (sscanf(str, "%u %u", &node, &interval) != 2) {
-				printf("Parse error %s", str);
-				return;
-			}
-		}
-		//printf("Collect node %u each %u ms, mask %x\n", node, interval, mask);
-
-		param_collector_config[i].node = node;
-		param_collector_config[i].interval = interval;
-		param_collector_config[i].mask = mask;
-
-		i++;
-		str = strtok_r(NULL, ",", &saveptr);
-	}
+    char buf[100];
+    param_get_data(&col_cnfstr, buf, 100);
+    //int len = strnlen(buf, 100);
+    //printf("Init with str: %s, len %u\n", buf, len);
+
+    /* Clear config array */
+    memset(param_collector_config, 0, sizeof(param_collector_config));
+
+    /* Get first token */
+    char *saveptr;
+    char * str = strtok_r(buf, ",", &saveptr);
+    int i = 0;
+
+    while ((str) && (strlen(str) > 1)) {
+        unsigned int node, interval, mask = 0xFFFFFFFF;
+        if (sscanf(str, "%u %u %x", &node, &interval, &mask) != 3) {
+            if (sscanf(str, "%u %u", &node, &interval) != 2) {
+                printf("Parse error %s", str);
+                return;
+            }
+        }
+        //printf("Collect node %u each %u ms, mask %x\n", node, interval, mask);
+
+        param_collector_config[i].node = node;
+        param_collector_config[i].interval = interval;
+        param_collector_config[i].mask = mask;
+
+        i++;
+        str = strtok_r(NULL, ",", &saveptr);
+    }
 
 }
